{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Azure ML Pipeline - Training & Registration"
      ],
      "metadata": {},
      "id": "d1482d0b"
    },
    {
      "cell_type": "code",
      "source": [
        "registered_env_name = \"experiment_env\"\n",
        "experiment_folder = 'exp_pipeline'\n",
        "dataset_prefix_name = 'exp'"
      ],
      "outputs": [],
      "execution_count": 37,
      "metadata": {},
      "id": "d2ed2bcb"
    },
    {
      "cell_type": "code",
      "source": [
        "# Import required packages\n",
        "from azureml.core import Workspace, Experiment, Datastore, Environment, Dataset\n",
        "from azureml.core.compute import ComputeTarget, AmlCompute, DataFactoryCompute\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "from azureml.core.runconfig import RunConfiguration\n",
        "from azureml.core.conda_dependencies import CondaDependencies\n",
        "from azureml.core.runconfig import DEFAULT_CPU_IMAGE\n",
        "from azureml.pipeline.core import Pipeline, PipelineParameter, PipelineData\n",
        "from azureml.pipeline.steps import PythonScriptStep\n",
        "from azureml.pipeline.core import PipelineParameter, PipelineData\n",
        "from azureml.data.output_dataset_config import OutputTabularDatasetConfig, OutputDatasetConfig, OutputFileDatasetConfig\n",
        "from azureml.data.datapath import DataPath\n",
        "from azureml.data.data_reference import DataReference\n",
        "from azureml.data.sql_data_reference import SqlDataReference\n",
        "from azureml.pipeline.steps import DataTransferStep\n",
        "import logging"
      ],
      "outputs": [],
      "execution_count": 38,
      "metadata": {},
      "id": "8006de6e"
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Connect to AML Workspace\n",
        "ws = Workspace.from_config()\n",
        "\n",
        "#Select AML Compute Cluster\n",
        "from azureml.core.compute import ComputeTarget, AmlCompute\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "cluster_name = \"mm-cluster\"\n",
        "\n",
        "try:\n",
        "    # Check for existing compute target\n",
        "    pipeline_cluster = ComputeTarget(workspace=ws, name=cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    # If it doesn't already exist, create it\n",
        "    try:\n",
        "        compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_DS11_V2', max_nodes=2)\n",
        "        pipeline_cluster = ComputeTarget.create(ws, cluster_name, compute_config)\n",
        "        pipeline_cluster.wait_for_completion(show_output=True)\n",
        "    except Exception as ex:\n",
        "        print(ex)\n",
        "    \n",
        "    \n",
        "#Get default datastore\n",
        "default_ds = ws.get_default_datastore()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found existing cluster, use it.\n"
        }
      ],
      "execution_count": 39,
      "metadata": {},
      "id": "d3f59e66"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create Run configuration\n",
        "The RunConfiguration defines the environment used across all the python steps."
      ],
      "metadata": {},
      "id": "a800a4a0"
    },
    {
      "cell_type": "code",
      "source": [
        "conda_yml_file = '../configuration/environment.yml'"
      ],
      "outputs": [],
      "execution_count": 40,
      "metadata": {},
      "id": "4e64e7fb"
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile $conda_yml_file\n",
        "name: experiment_env\n",
        "dependencies:\n",
        "- python=3.6.2\n",
        "- scikit-learn\n",
        "- ipykernel\n",
        "- matplotlib\n",
        "- pandas\n",
        "- pip\n",
        "- pip:\n",
        "  - azureml-defaults\n",
        "  - pyarrow"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting ../configuration/environment.yml\n"
        }
      ],
      "execution_count": 41,
      "metadata": {},
      "id": "c585faf0"
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "# Create a folder for the pipeline step files\n",
        "os.makedirs(experiment_folder, exist_ok=True)\n",
        "\n",
        "print(experiment_folder)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "exp_pipeline\n"
        }
      ],
      "execution_count": 42,
      "metadata": {},
      "id": "142a17dd"
    },
    {
      "cell_type": "code",
      "source": [
        "registered_env_name"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 43,
          "data": {
            "text/plain": "'experiment_env'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 43,
      "metadata": {},
      "id": "af1db661"
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Environment\n",
        "from azureml.core.runconfig import RunConfiguration\n",
        "\n",
        "# Create a Python environment for the experiment (from a .yml file)\n",
        "experiment_env = Environment.from_conda_specification(registered_env_name, conda_yml_file)\n",
        "\n",
        "# Register the environment \n",
        "experiment_env.register(workspace=ws)\n",
        "registered_env = Environment.get(ws, registered_env_name)\n",
        "\n",
        "# Create a new runconfig object for the pipeline\n",
        "pipeline_run_config = RunConfiguration()\n",
        "\n",
        "# Use the compute you created above. \n",
        "pipeline_run_config.target = pipeline_cluster\n",
        "\n",
        "# Assign the environment to the run configuration\n",
        "pipeline_run_config.environment = registered_env\n",
        "\n",
        "print (\"Run configuration created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Run configuration created.\n"
        }
      ],
      "execution_count": 46,
      "metadata": {},
      "id": "e7778ff2"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Define Output datasets\n",
        "\n",
        "Configure datasets to pass between pipeline steps.  "
      ],
      "metadata": {},
      "id": "51624940"
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "ba40a6b0"
    },
    {
      "cell_type": "code",
      "source": [
        "exp_raw_data       = OutputFileDatasetConfig(name= dataset_prefix_name + 'Raw_Data', destination=(default_ds, dataset_prefix_name + '_raw_data/{run-id}')).read_delimited_files().register_on_complete(name= dataset_prefix_name + '_Raw_Data')\n",
        "exp_training_data  = OutputFileDatasetConfig(name=dataset_prefix_name + 'Training_Data', destination=(default_ds, dataset_prefix_name + '_training_data/{run-id}')).read_delimited_files().register_on_complete(name=dataset_prefix_name + '_Training_Data')\n",
        "exp_testing_data   = OutputFileDatasetConfig(name=dataset_prefix_name + 'Testing_Data', destination=(default_ds, dataset_prefix_name + '_testing_data/{run-id}')).read_delimited_files().register_on_complete(name=dataset_prefix_name + '_Testing_Data')"
      ],
      "outputs": [],
      "execution_count": 36,
      "metadata": {},
      "id": "d20c4abb"
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile ./pipeline_step_scripts/get_data.py\n",
        "\n",
        "from azureml.core import Run, Workspace, Datastore, Dataset\n",
        "from azureml.data.datapath import DataPath\n",
        "import pandas as pd\n",
        "import os\n",
        "import argparse\n",
        "from sklearn import preprocessing\n",
        "import numpy as np\n",
        "\n",
        "#Parse input arguments\n",
        "parser = argparse.ArgumentParser(\"Get data from and register in AML workspace\")\n",
        "parser.add_argument('--exp_raw_dataset', dest='exp_raw_dataset', required=True)\n",
        "\n",
        "args, _ = parser.parse_known_args()\n",
        "exp_raw_dataset = args.exp_raw_dataset\n",
        "\n",
        "#Get current run\n",
        "current_run = Run.get_context()\n",
        "\n",
        "#Get associated AML workspace\n",
        "ws = current_run.experiment.workspace\n",
        "\n",
        "#Connect to ADLS Gen2 datastore\n",
        "ds = Datastore.get(ws, 'adlsgen2datastore')\n",
        "\n",
        "#Read all raw data from ADLS Gen2\n",
        "csv_paths = [(ds, 'exp/training/')]\n",
        "raw_ds = Dataset.Tabular.from_delimited_files(path=csv_paths)\n",
        "raw_df = raw_ds.to_pandas_dataframe().astype(np.float64)\n",
        "\n",
        "#Make directory on mounted storage\n",
        "os.makedirs(autoencoder_raw_dataset, exist_ok=True)\n",
        "\n",
        "#Upload modified dataframe\n",
        "raw_df.to_csv(os.path.join(autoencoder_raw_dataset, 'autoencoder_raw_data.csv'), index=False)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting ./pipeline_step_scripts/get_data.py\n"
        }
      ],
      "execution_count": 47,
      "metadata": {},
      "id": "f37944cf"
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "9bb142bd"
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile ./pipeline_step_scripts/split_and_scale.py\n",
        "\n",
        "from azureml.core import Run, Workspace, Datastore, Dataset\n",
        "from azureml.data.datapath import DataPath\n",
        "import os\n",
        "import argparse\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn import preprocessing\n",
        "from sklearn.manifold import TSNE\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "import joblib\n",
        "from numpy.random import seed\n",
        "\n",
        "#Parse input arguments\n",
        "parser = argparse.ArgumentParser(\"Split raw data into train/test and scale appropriately\")\n",
        "parser.add_argument('--exp_training_data', dest='autoencoder_training_data', required=True)\n",
        "parser.add_argument('--exp_testing_data', dest='autoencoder_testing_data', required=True)\n",
        "parser.add_argument('--split_to_train_pipeline_data', dest='split_to_train_pipeline_data', required=True)\n",
        "\n",
        "args, _ = parser.parse_known_args()\n",
        "exp_training_data = args.exp_training_data\n",
        "exp_testing_data = args.exp_testing_data\n",
        "split_to_train_pipeline_data = args.split_to_train_pipeline_data\n",
        "\n",
        "#Get current run\n",
        "current_run = Run.get_context()\n",
        "\n",
        "#Get associated AML workspace\n",
        "ws = current_run.experiment.workspace\n",
        "\n",
        "# Read input dataset to pandas dataframe\n",
        "raw_datset = current_run.input_datasets['Exp_Raw_Data']\n",
        "raw_df = raw_datset.to_pandas_dataframe().astype(np.float64)\n",
        "\n",
        "scaler = preprocessing.MinMaxScaler()\n",
        "\n",
        "X_train = pd.DataFrame(scaler.fit_transform(raw_df),\n",
        "                      columns=raw_df.columns,\n",
        "                      index=raw_df.index)\n",
        "\n",
        "# Save train data to both train and test (reflects the usage pattern in this sample. Note: test/train sets are typically distinct data).\n",
        "os.makedirs(exp_training_data, exist_ok=True)\n",
        "os.makedirs(exp_testing_data, exist_ok=True)\n",
        "X_train.to_csv(os.path.join(autoencoder_training_data, 'exp_training_data.csv'), index=False)\n",
        "X_train.to_csv(os.path.join(autoencoder_testing_data, 'exp_testing_data.csv'), index=False)\n",
        "\n",
        "# Save scaler to PipelineData and outputs for record-keeping\n",
        "os.makedirs('./outputs', exist_ok=True)\n",
        "\n",
        "os.makedirs(split_to_train_pipeline_data, exist_ok=True)\n",
        "joblib.dump(scaler, os.path.join(split_to_train_pipeline_data, 'scaler.pkl'))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "87df8c61"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}