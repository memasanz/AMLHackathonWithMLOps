# Continuous Integration (CI) pipeline that orchestrates the training, evaluation, and registration of the diabetes_regression model.

resources:
  containers:
  - container: mlops
    image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - sourcecode/03_devopspipeline


variables:
- template: variable_template.yml
- group: vgroup-aml-devops-dev
- name: DEPLOY
  value: 0


pool:
  vmImage: ubuntu-latest

stages:
- stage: 'BuildPipeline'
  displayName: 'BuildPipeline'
  jobs:
  - job: "BuildPipeline"
    displayName: "BuildPipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
   
#     - task: Bash@3
#       inputs:
#         workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
#         targetType: 'inline'
#         script: |
#           echo "##vso[task.setvariable variable=DEPLOY;]$(cat ./run_outputs/deploy.txt)"
#           echo $DEPLOY

#     - task: Bash@3
#       inputs:
#         workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
#         targetType: 'inline'
#         script: |
#           echo "##vso[task.setvariable variable=DEPLOY;]$(cat ./run_outputs/deploy_details.json | jq)"
#           echo $DEPLOY

    - task: Bash@3
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=DEPLOY;]$(cat ./run_outputs/deploy_details.json | jq {'nextstep'})"
          echo $DEPLOY
          
    - task: Bash@3
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
        targetType: 'inline'
        script: |
          echo $DEPLOY

#     - task: Bash@3
#       inputs:
#         workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
#         targetType: 'inline'
#         script: |
#           echo '##vso[task.setvariable variable=DEPLOY;]$(cat ./run_outputs/deploy_details.json | jq {"nextstep"})'
#           echo $DEPLOY

    - task: AzureCLI@1
      inputs:
        azureSubscription: $(ml-ws-connection)
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Invoke the Python building and publishing a training pipeline
          python -m 01_DevOpsTrainingPipeline
      displayName: 'Run Azure Machine Learning Pipeline'


    - task: Bash@3
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
        targetType: 'inline'
        script: |
          DEPLOY = '$(cat ./run_outputs/deploy.txt)'
          echo $DEPLOY

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/sourcecode/03_devopspipeline'
        contents: '**/run_outputs/*' 
        targetFolder: '$(Build.ArtifactStagingDirectory)' 
        #cleanTargetFolder: false # Optional
        #overWrite: false # Optional
        #flattenFolders: false # Optional
        #preserveTimestamp: false # Optional
        #retryCount: 0 # Optional
        #ignoreMakeDirErrors: false # Optional

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        ArtifactName: 'drop'
        publishLocation: 'Container'
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      
    - task: AzureCLI@1
      condition: ${{ containsValue('deploy', variables['deploy']) }}
      inputs:
        azureSubscription: $(ml-ws-connection)
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)/sourcecode/03_devopspipeline
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Invoke the Python building and publishing a training pipeline
          python -m 02_DeployACI
      displayName: 'DeployACI'
